name: CI/CD
on:
  push:
    branches: 
      - "*"
    tags:
      - "*"
  schedule:
    - cron: "0 8 1 * *"
jobs:
  test:
    runs-on: ubuntu-latest
    name: Test on self
    outputs:
      should-release: ${{ steps.semver-checkout.outputs.should-release }}
      version: ${{ steps.semver-checkout.outputs.version }}
      is-prerelease: ${{ steps.semver-checkout.outputs.is-github-prerelease }}
    steps:
      - id: semver-checkout
        name: Checkout
        uses: EasyDesk/action-semver-checkout@v1
      - name: Run action
        uses: ./test/
        with:
          src: .
          dst: ./result
      - name: Verify result
        run: |
          test ! -z "$(ls -A ./result)"
  release:
    name: GitHub Release Job
    if: ${{ needs.test.outputs.should-release == 'true' }}
    needs:
      - test
    runs-on: ubuntu-20.04
    steps:
      - uses: EasyDesk/action-semver-release@v1
        with:
          version: ${{ needs.test.outputs.version }}
          prerelease: ${{ needs.test.outputs.is-prerelease }}
  push-to-registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    if: ${{ needs.test.outputs.should-release == 'true' || github.event_name == 'schedule' }}
    needs:
      - test
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            deloo/markdown-docs
            ghcr.io/ldeluigi/markdown-docs
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,pattern=nightly
            type=schedule,pattern=auto-{{date 'YYYYMMDDHHmm'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
          labels: |
            maintainer=ldeluigi
            org.opencontainers.image.title=Markdown Docs
            org.opencontainers.image.description=Contains scripts to generate documentation from markdown and PlantUML.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  update-gh-pages:
    name: Generate and upload new GitHub Pages
    runs-on: ubuntu-latest
    needs: 
      - release
      - push-to-registries
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run action
        uses: ./
        with:
          src: .
          dst: ./result
          icon: file-document-edit
      - name: Deploy GH Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./result
